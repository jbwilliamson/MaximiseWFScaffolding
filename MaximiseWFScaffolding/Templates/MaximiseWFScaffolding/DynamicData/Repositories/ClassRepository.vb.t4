<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="vb" #>
<#@ include file="../../WebForms/Imports.include.t4" #><##>
Imports System.Collections.Generic
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Web.UI.WebControls
Imports ScaffoldFilter

Namespace Repositories
	Public Class <#= ModelName #>Repository(Of TEntity As Class, TKey)
		Inherits RepositoryBase(Of TEntity, TKey)
		Public Sub New()
			MyBase.New()
		End Sub

		' <summary>
		' Load the default list of items from the database, which may include one or more filter options
		' May include any foreign key tables for TEntity model
		' Can be sorted directed from the listview with optional sortByExpression
		' Returns an IQueryable list of TEntity which loads directly into the listview
		' </summary>
		Public Function GetData(<ScaffoldFilterParameter("<#= ModelName #>FilterDefault")> filterData As String, sortByExpression As String) As IQueryable(Of TEntity)
<#			string includes = GetIncludeListVB();#>
			<#=includes#>
			Dim s As System.Web.SessionState.HttpSessionState = System.Web.HttpContext.Current.Session
            If s IsNot Nothing Then
                sortByExpression = CorrectSorting(sortByExpression, s("<#= ModelName #>SortExpression"), s("<#= ModelName #>SortDirection"))
            End If

<#if (GetIncludeListVB().Length > 0) {#>
			Return GetModelData(includes, filterData, sortByExpression)
<#}else{#>
			Return GetModelData(filterData, sortByExpression)
<#}#>
		End Function

		Public Function UpdateItem(<#=PrimaryKeyName#> As TKey, modelMethodContext As ModelMethodContext) As Integer
			Return UpdateItemBase(<#=PrimaryKeyName#>, modelMethodContext)
		End Function

		Public Function DeleteItem(<#=PrimaryKeyName#> As TKey, modelMethodContext As ModelMethodContext) As Integer
			Return DeleteItemBase(<#=PrimaryKeyName#>, modelMethodContext)
		End Function
	End Class
End Namespace

<#+
string GetIncludeListVB() {
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	
	if (relatedProperties.Count > 0)
	{
		string returnArray = "Dim includes As String() = New String() {" + String.Join("", relatedProperties.Values.Select(property => String.Format("\"{0}\",", property.AssociationPropertyName)));
		returnArray = returnArray.Substring(0, returnArray.Length-1) + "}";
		return returnArray;
	}
	else
	{
		return "";
	}
}
#>
