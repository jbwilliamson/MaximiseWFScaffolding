<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ include file="../../WebForms/Imports.include.t4" #><##>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Web.DynamicData;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
<#if(IsAsyncRepository) {#>
using System.Threading.Tasks;
<#}#>
using ScaffoldFilter;

namespace <#= DefaultNamespace #>.Filters 
{
    public partial class ForeignKeyFilter : ScaffoldFilter.ScaffoldFilterUserControl 
	{
<#if(IsAsyncRepository) {#>
		public event AsyncForeignKeyEventHandler ForeignKey; 
<#} else {#>
		public event ForeignKeyEventHandler ForeignKey; 
<#}#>

		public override Control FilterControl
        {
            get { return this.SFFilter_DropDownList1; }
        }

		protected void SFFilter_DropDownList1_SelectedIndexChanged(object sender, EventArgs e)
        {
			this.OnFilterChanged(SFFilter_DropDownList1.SelectedValue, Column.FieldName);
        }

        protected void SFFilter_DropDownList1_Load(object sender, EventArgs e)
        {
            if (!IsPostBack)
            {
                ForeignModelEventArgs fmea = new ForeignModelEventArgs();
                fmea.returnResults = null;
                fmea.foreignKeyModel = Column.FieldName;
                fmea.keyType = ForeignModelEventArgs.LoadForeignTableByKey;

<#if(IsAsyncRepository) {#>
				this.Page.RegisterAsyncTask(new PageAsyncTask(async () =>
				{
					if (this.ForeignKey != null) 
					{
						SFFilter_DropDownList1.Items.Clear();
						SFFilter_DropDownList1.Items.Add(new ListItem("All", ""));
						await this.ForeignKey(fmea);
						PopulateListControl(SFFilter_DropDownList1, fmea.returnResults, Column.ForeignField);
					
						string defaultValue = "";
                        FilterLoadEventArgs flea = new FilterLoadEventArgs();
                        flea.FilterDefaults = null;
                        this.OnFilterLoad(flea);

						SFFilter_DropDownList1.SelectedIndex = 0;
                        if (flea.FilterDefaults != null)
                        {
                            flea.FilterDefaults.TryGetValue(Column.FieldName, out defaultValue);
                            if (defaultValue != null) {
                                SFFilter_DropDownList1.SelectedValue = defaultValue;
                            }
                        }
					}
				}));
<#}else {#>
                if (this.ForeignKey != null) 
                {
                    SFFilter_DropDownList1.Items.Clear();
                    SFFilter_DropDownList1.Items.Add(new ListItem("All", ""));
					this.ForeignKey(fmea);
                    PopulateListControl(SFFilter_DropDownList1, fmea.returnResults, Column.ForeignField);

					string defaultValue = "";
                    FilterLoadEventArgs flea = new FilterLoadEventArgs();
                    flea.FilterDefaults = null;
                    this.OnFilterLoad(flea);

					SFFilter_DropDownList1.SelectedIndex = 0;
                    if (flea.FilterDefaults != null)
                    {
                        flea.FilterDefaults.TryGetValue(Column.FieldName, out defaultValue);
                        if (defaultValue != null) {
                            SFFilter_DropDownList1.SelectedValue = defaultValue;
                        }
                    }
                }
<#}#>
            }
        }
    }
}
