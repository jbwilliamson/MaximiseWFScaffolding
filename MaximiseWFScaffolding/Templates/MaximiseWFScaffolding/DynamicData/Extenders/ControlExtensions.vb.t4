<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="vb" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
Imports System.ComponentModel.DataAnnotations
Imports System.Web.DynamicData
Imports System.Web
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection
Imports System.Runtime.CompilerServices 

Namespace Extenders
    Module BasicExtenders
        <Extension> _
        Public Sub SetDataMethodsObject(dataControl As DataBoundControl, dataMethodObject As Object)
            AddHandler dataControl.CallingDataMethods, Sub(s, e)
                                                           e.DataMethodsObject = dataMethodObject
                                                       End Sub
            'dataControl.CallingDataMethods += Function(s, e) InlineAssignHelper(e.DataMethodsObject, dataMethodObject)
        End Sub

        <Extension> _
        Public Sub RedirectToRouteOnItemInserted(formView As FormView, routeName As String)
            AddHandler formView.ItemInserted, Function(s, e)
                                                  If formView.Page.ModelState.IsValid Then
                                                      formView.Page.Response.Redirect(routeName)
                                                  End If
                                                  Return ""
                                              End Function
        End Sub

        <Extension> _
        Public Sub RedirectToRouteOnItemDeleted(formView As FormView, routeName As String)
            AddHandler formView.ItemDeleted, Function(s, e)
                                                 If formView.Page.ModelState.IsValid Then
                                                     formView.Page.Response.Redirect(routeName)
                                                 End If
                                                 Return ""
                                             End Function
        End Sub

        <Extension> _
        Public Sub RedirectToRouteOnItemCommand(formView As FormView, routeName As String)
            AddHandler formView.ItemCommand, Function(s, e)
                                                 If e.CommandName.Equals("Cancel") Then
                                                     formView.Page.Response.Redirect(routeName)
                                                 End If
                                                 Return ""
                                             End Function
        End Sub

        <Extension> _
        Public Sub RedirectToRouteOnItemUpdated(formView As FormView, routeName As String)
            AddHandler formView.ItemUpdated, Function(s, e)
                                                 If formView.Page.ModelState.IsValid Then
                                                     formView.Page.Response.Redirect(routeName)
                                                 End If
                                                 Return ""
                                             End Function
        End Sub
        Private Function InlineAssignHelper(Of T)(ByRef target As T, value As T) As T
            target = value
            Return value
        End Function

        <Extension> _
        Public Function OrderBy(Of T)(source As IQueryable(Of T), [property] As String) As IOrderedQueryable(Of T)
            Return ApplyOrder(Of T)(source, [property], "OrderBy")
        End Function
        <Extension> _
        Public Function OrderByDescending(Of T)(source As IQueryable(Of T), [property] As String) As IOrderedQueryable(Of T)
            Return ApplyOrder(Of T)(source, [property], "OrderByDescending")
        End Function
        <Extension> _
        Public Function ThenBy(Of T)(source As IOrderedQueryable(Of T), [property] As String) As IOrderedQueryable(Of T)
            Return ApplyOrder(Of T)(source, [property], "ThenBy")
        End Function
        <Extension> _
        Public Function ThenByDescending(Of T)(source As IOrderedQueryable(Of T), [property] As String) As IOrderedQueryable(Of T)
            Return ApplyOrder(Of T)(source, [property], "ThenByDescending")
        End Function
        Private Function ApplyOrder(Of T)(source As IQueryable(Of T), [property] As String, methodName As String) As IOrderedQueryable(Of T)
            Dim props As String() = [property].Split("."c)
            Dim type As Type = GetType(T)
            Dim arg As ParameterExpression = Expression.Parameter(type, "x")
            Dim expr As Expression = arg
            For Each prop As String In props
                Dim pi As PropertyInfo = type.GetProperty(prop)
                expr = Expression.[Property](expr, pi)
                type = pi.PropertyType
            Next
            Dim delegateType As Type = GetType(Func(Of ,)).MakeGenericType(GetType(T), type)
            Dim lambda As LambdaExpression = Expression.Lambda(delegateType, expr, arg)

            Dim result As Object = GetType(Queryable).GetMethods().[Single](Function(method) method.Name = methodName AndAlso method.IsGenericMethodDefinition AndAlso method.GetGenericArguments().Length = 2 AndAlso method.GetParameters().Length = 2).MakeGenericMethod(GetType(T), type).Invoke(Nothing, New Object() {source, lambda})
            Return DirectCast(result, IOrderedQueryable(Of T))
        End Function
    End Module
End Namespace
