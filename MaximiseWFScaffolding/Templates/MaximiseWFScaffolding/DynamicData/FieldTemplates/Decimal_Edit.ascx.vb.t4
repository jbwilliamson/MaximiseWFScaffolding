<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="vb" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ClientSideValidation" #>
Imports System.ComponentModel.DataAnnotations
Imports <#= DefaultNamespace #>.Extenders

Public Partial Class Decimal_EditField
	Inherits System.Web.DynamicData.FieldTemplateUserControl

	Public Property SetFocus() As String
		Get
			Return m_SetFocus
		End Get
		Set
			m_SetFocus = Value
		End Set
	End Property
	Private m_SetFocus As String

	Protected Sub Page_Init(sender As Object, e As EventArgs)
		If Not IsPostBack Then

<#if (ClientSideValidation == "HTML5") {#>
			Dim errorMessage As String = ""
<#}#>
				
			TextBox1.ToolTip = Column.Description
			Label1.Text = Column.DisplayName + " :"

			If Column.Prompt IsNot Nothing AndAlso Column.Prompt.Length > 0 Then
				TextBox1.Attributes.Add("placeholder", Column.Prompt)
			End If

			If SetFocus IsNot Nothing AndAlso SetFocus = "True" Then
				TextBox1.Attributes.Add("autofocus", "autofocus")
			End If

<#if (ClientSideValidation != "None") {#>
<#if (ClientSideValidation == "Unobtrusive") {#>

			TextBox1.Attributes.Add("data-val", "true")
<#}#>

			Dim rangeAttr As RangeAttribute = Column.Attributes.OfType(Of RangeAttribute)().FirstOrDefault()
<#if (ClientSideValidation == "HTML5") {#>

			If Column.IsRequired OrElse rangeAttr IsNot Nothing Then
				TextBox1.Attributes.Add("data-val-clear", "")
				If Column.IsRequired Then
					TextBox1.Attributes.Add("oninput", "setCustomValidity(this.validity.valid ? this.dataset.valClear : this.value.length > 0 ? this.dataset.valClear : this.dataset.valRequired);")
				Else
					TextBox1.Attributes.Add("oninput", "setCustomValidity(this.validity.valid ? this.dataset.valClear : this.title);")
				End If
			End If
<#}#>

			If Column.IsRequired Then
<#if (ClientSideValidation == "HTML5") {#>
				TextBox1.Attributes.Add("data-val-required", If(Column.RequiredErrorMessage Is Nothing, ValidationConstants.Validation_Required_DefaultError, Column.RequiredErrorMessage))
				TextBox1.Attributes.Add("required", "required")
				errorMessage = "this.validity.valueMissing ? this.dataset.valRequired : "
<#} else {#>
				TextBox1.Attributes.Add("data-val-required", If(Column.RequiredErrorMessage Is Nothing, ValidationConstants.Validation_Required_DefaultError, Column.RequiredErrorMessage))
<#}#>
			End If

			If rangeAttr IsNot Nothing Then
<#if (ClientSideValidation == "HTML5") {#>
				TextBox1.Attributes.Add("maxlength", (rangeAttr.Maximum.ToString().Length + 3).ToString())
				TextBox1.Attributes.Add("min", rangeAttr.Minimum.ToString())
				TextBox1.Attributes.Add("max", rangeAttr.Maximum.ToString())
				TextBox1.Attributes.Add("data-val-range", If(rangeAttr.ErrorMessage Is Nothing, ValidationConstants.Validation_Range_DefaultError, rangeAttr.ErrorMessage))
				errorMessage = errorMessage & "(this.validity.rangeUnderflow || this.validity.rangeOverflow) ? this.dataset.valRange : "
<#} else {#>
				TextBox1.Attributes.Add("data-val-range-min", rangeAttr.Minimum.ToString())
				TextBox1.Attributes.Add("data-val-range-max", rangeAttr.Maximum.ToString())
<#}#>
				TextBox1.Attributes.Add("data-val-range", If(rangeAttr.ErrorMessage Is Nothing, ValidationConstants.Validation_Range_DefaultError, rangeAttr.ErrorMessage))
			End If

<#if (ClientSideValidation == "Unobtrusive") {#>
			TextBox1.Attributes.Add("data-val-regex-pattern", ValidationConstants.Decimal_ValidationRegExpr)
			TextBox1.Attributes.Add("data-val-regex", ("The '" + Column.DisplayName & "' ") + ValidationConstants.Decimal_ValidationRegError)
<#}#>
<#if (ClientSideValidation == "HTML5") {#>
			errorMessage = "setCustomValidity(" & errorMessage & "this.dataset.valClear);"
			TextBox1.Attributes.Add("oninvalid", errorMessage)
<#}#>
<#}#>
		End If
	End Sub

	' show bootstrap has-error
	Protected Sub Page_PreRender(sender As Object, e As EventArgs)
		' if validation error then apply bootstrap has-error CSS class
		Dim isValid = Me.Page.ModelState.IsValidField(Column.Name)
		Div1.Attributes("class") = If(isValid, "form-group", "form-group has-error")
	End Sub

	Protected Overrides Sub ExtractValues(dictionary As IOrderedDictionary)
		dictionary(Column.Name) = ConvertEditedValue(TextBox1.Text)
	End Sub

	Public Overrides ReadOnly Property DataControl() As Control
		Get
			Return TextBox1
		End Get
	End Property
End Class
