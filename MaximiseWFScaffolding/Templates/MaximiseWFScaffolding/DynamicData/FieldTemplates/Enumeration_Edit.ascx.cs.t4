<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ClientSideValidation" #>
using System;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using <#= DefaultNamespace #>.Extenders;

namespace <#= DefaultNamespace #>.FieldTemplates
{
    public partial class Enumeration_EditField : System.Web.DynamicData.FieldTemplateUserControl 
	{
        private Type _enumType;
		public string SetFocus { get; set; }
		string defaultValue = "";

        protected void Page_Init(object sender, EventArgs e) 
		{
			if (!IsPostBack)
			{
				Label1.Text = Column.DisplayName + " :";
				DropDownList1.ToolTip = Column.Description;

				if (SetFocus != null && SetFocus == "True") {
					DropDownList1.Attributes.Add("autofocus", "autofocus");
				}

<#if (ClientSideValidation != "None") {#>
				if (Column.IsRequired)
                {
<#if (ClientSideValidation == "HTML5") {#>
					DropDownList1.Attributes.Add("data-val-required", Column.RequiredErrorMessage == null ? ValidationConstants.Validation_Required_DefaultError : Column.RequiredErrorMessage);
                    DropDownList1.Attributes.Add("data-val-clear", "");
                    DropDownList1.Attributes.Add("required", "required");
                    DropDownList1.Attributes.Add("oninvalid", "setCustomValidity(this.dataset.valRequired);");
                    DropDownList1.Attributes.Add("onchange", "setCustomValidity(this.dataset.valClear);");
<#} else {#>
					DropDownList1.Attributes.Add("data-val", "true");
					DropDownList1.Attributes.Add("data-val-required", Column.RequiredErrorMessage == null ? ValidationConstants.Validation_Required_DefaultError : Column.RequiredErrorMessage);
<#}#>
				}
<#}#>
				
				if (DropDownList1.Items.Count == 0) {
					if (Mode == DataBoundControlMode.Insert || !Column.IsRequired) {
						DropDownList1.Items.Add(new ListItem("Select An Option", String.Empty));
					}
					PopulateListControl(DropDownList1);

                    defaultValue = Convert.ToString(Column.DefaultValue);

                    if (defaultValue != string.Empty && Mode == DataBoundControlMode.Insert)
                    {
                        ListItem li = DropDownList1.Items.FindByValue(defaultValue);
                        if (li != null) {
                            DropDownList1.SelectedValue = defaultValue;
                        }
                    }
				}
			}
        }
	
		// show bootstrap has-error
		protected void Page_PreRender(object sender, EventArgs e)
        {
            // if validation error then apply bootstrap has-error CSS class
            var isValid = this.Page.ModelState.IsValidField(Column.Name);
            Div1.Attributes["class"] = isValid ? "form-group" : "form-group has-error";
        }

        protected override void OnDataBinding(EventArgs e) {
            base.OnDataBinding(e);
    
            if (Mode == DataBoundControlMode.Edit && FieldValue != null) {
                string selectedValueString = GetSelectedValueString();
                ListItem item = DropDownList1.Items.FindByValue(selectedValueString);
                if (item != null) {
                    DropDownList1.SelectedValue = selectedValueString;
                }
            }
        }
    
        private Type EnumType {
            get {
                if (_enumType == null) {
                    _enumType = Column.GetEnumType();
                }
                return _enumType;
            }
        }
    
        protected override void ExtractValues(IOrderedDictionary dictionary) {
            string value = DropDownList1.SelectedValue;
            if (value == String.Empty) {
                value = null;
            }
            dictionary[Column.Name] = ConvertEditedValue(value);
        }
    
        public override Control DataControl {
            get {
                return DropDownList1;
            }
        }
    }
}
