<#@ Template Language="C#" HostSpecific="True"  #>
<#@ Output Extension="cs" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter type="System.String" name="DefaultNamespace" #>
<#@ parameter type="System.String" name="ClientSideValidation" #>
using System;
using System.Linq;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.Web.DynamicData;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using <#= DefaultNamespace #>.Extenders;

namespace <#= DefaultNamespace #>.FieldTemplates
{
    public partial class Decimal_EditField : System.Web.DynamicData.FieldTemplateUserControl 
	{
		public string SetFocus { get; set; }

		protected void Page_Init(object sender, EventArgs e) 
		{
			if (!IsPostBack)
			{
<#if (ClientSideValidation == "HTML5") {#>
				string errorMessage = "";
<#}#>
				TextBox1.ToolTip = Column.Description;
				Label1.Text = Column.DisplayName + " :";
			
				if (Column.Prompt != null && Column.Prompt.Length > 0) {
					TextBox1.Attributes.Add("placeholder", Column.Prompt);
				}

				if (SetFocus != null && SetFocus == "True") {
					TextBox1.Attributes.Add("autofocus", "autofocus");
				}
<#if (ClientSideValidation != "None") {#>
<#if (ClientSideValidation == "Unobtrusive") {#>

				TextBox1.Attributes.Add("data-val", "true");
<#}#>

				RangeAttribute rangeAttr = Column.Attributes.OfType<RangeAttribute>().FirstOrDefault();
<#if (ClientSideValidation == "HTML5") {#>

                if (Column.IsRequired || rangeAttr != null)
                {
                    TextBox1.Attributes.Add("data-val-clear", "");
                    if (Column.IsRequired) {
                        TextBox1.Attributes.Add("oninput", "setCustomValidity(this.validity.valid ? this.dataset.valClear : this.value.length > 0 ? this.dataset.valClear : this.dataset.valRequired);");
                    }
                    else {
                        TextBox1.Attributes.Add("oninput", "setCustomValidity(this.validity.valid ? this.dataset.valClear : this.title);");
                    }
                }
<#}#>

                if (Column.IsRequired)
                {
<#if (ClientSideValidation == "HTML5") {#>
                    TextBox1.Attributes.Add("data-val-required", Column.RequiredErrorMessage == null ? ValidationConstants.Validation_Required_DefaultError : Column.RequiredErrorMessage);
                    TextBox1.Attributes.Add("required", "required");
                    errorMessage = "this.validity.valueMissing ? this.dataset.valRequired : ";
<#} else {#>
					TextBox1.Attributes.Add("data-val-required", Column.RequiredErrorMessage == null ? ValidationConstants.Validation_Required_DefaultError : Column.RequiredErrorMessage);
<#}#>
				}

				if (rangeAttr != null)
                {
<#if (ClientSideValidation == "HTML5") {#>
                    TextBox1.Attributes.Add("maxlength", (rangeAttr.Maximum.ToString().Length + 3).ToString());
                    TextBox1.Attributes.Add("min", rangeAttr.Minimum.ToString());
                    TextBox1.Attributes.Add("max", rangeAttr.Maximum.ToString());
                    TextBox1.Attributes.Add("data-val-range", rangeAttr.ErrorMessage == null ? ValidationConstants.Validation_Range_DefaultError : rangeAttr.ErrorMessage);
                    errorMessage = errorMessage + "(this.validity.rangeUnderflow || this.validity.rangeOverflow) ? this.dataset.valRange : ";
<#} else {#>
                    TextBox1.Attributes.Add("data-val-range-min", rangeAttr.Minimum.ToString());
                    TextBox1.Attributes.Add("data-val-range-max", rangeAttr.Maximum.ToString());
                    TextBox1.Attributes.Add("data-val-range", rangeAttr.ErrorMessage == null ? ValidationConstants.Validation_Range_DefaultError : rangeAttr.ErrorMessage);
<#}#>
                }

<#if (ClientSideValidation == "Unobtrusive") {#>
				TextBox1.Attributes.Add("data-val-regex-pattern", ValidationConstants.Decimal_ValidationRegExpr);
				TextBox1.Attributes.Add("data-val-regex", "The '" + Column.DisplayName + "' " + ValidationConstants.Decimal_ValidationRegError);
<#}#>
<#if (ClientSideValidation == "HTML5") {#>
                errorMessage = "setCustomValidity(" + errorMessage + "this.dataset.valClear);";
                TextBox1.Attributes.Add("oninvalid", errorMessage);
<#}#>
<#}#>
			}
        }

		// show bootstrap has-error
		protected void Page_PreRender(object sender, EventArgs e)
        {
            // if validation error then apply bootstrap has-error CSS class
            var isValid = this.Page.ModelState.IsValidField(Column.Name);
            Div1.Attributes["class"] = isValid ? "form-group" : "form-group has-error";
        }

        protected override void ExtractValues(IOrderedDictionary dictionary) {
            dictionary[Column.Name] = ConvertEditedValue(TextBox1.Text);
        }
    
        public override Control DataControl {
            get {
                return TextBox1;
            }
        }
    }
}
