<#+

// Should you be able to edit the property?
// Used by Insert, Edit forms to decide which properties to edit
bool ShouldEdit(PropertyMetadata property) {
	return property.Scaffold 
		&& !property.IsAutoGenerated 
		&& !property.IsReadOnly 
		&& !property.IsAssociation;
}

// Should display the property?
// Used by Default, Delete forms to decide which properties to display
bool ShouldDisplay(PropertyMetadata property) {
	return property.Scaffold 
		&& !property.IsAssociation;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName() {
	return (ModelMetadata.PrimaryKeys != null && ModelMetadata.PrimaryKeys.Count() == 1) ? ModelMetadata.PrimaryKeys[0].PropertyName : null;
}

// Returns the Includes required to get all related entities.
// For example, .Include(m => m.Actor).Include(m => m.Category) 
string GetIncludeExpressionsCS() {
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	return String.Join("", relatedProperties.Values.Select(property => String.Format(".Include(m => m.{0})", property.AssociationPropertyName)));
}

// Returns the Includes required to get all related entities.
// For example, .Include(m => m.Actor).Include(m => m.Category) 
string GetIncludeListCS() {
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	return String.Join("", relatedProperties.Values.Select(property => String.Format(".Include(\"{0}\")", property.AssociationPropertyName)));
}

string GetIncludeExpressionsVB() {
	var relatedProperties = ModelMetadata.RelatedEntities.ToDictionary(item => item.AssociationPropertyName);
	return String.Join("", relatedProperties.Values.Select(property => String.Format(".Include(Function(m) m.{0})", property.AssociationPropertyName)));
}

// Returns either the value of the Display(Name=) attribute or the property name
string GetDisplayName(string propertyName, bool listView) 
{
	return (listView && ShortNames.ContainsKey(propertyName)) ? ShortNames[propertyName] : ModelDisplayNames.ContainsKey(propertyName) ? ModelDisplayNames[propertyName]  + " :" : propertyName + " :";
}

string RemoveWhiteSpace(string groupName) {
	return groupName.Replace(" ", string.Empty);
}

#>